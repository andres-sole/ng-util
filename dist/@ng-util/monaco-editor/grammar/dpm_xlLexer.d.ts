import { ATN } from 'antlr4ts/atn/ATN';
import { CharStream } from 'antlr4ts/CharStream';
import { Lexer } from 'antlr4ts/Lexer';
import { Vocabulary } from 'antlr4ts/Vocabulary';
export declare class dpm_xlLexer extends Lexer {
    static readonly BOOLEAN_LITERAL = 1;
    static readonly AND = 2;
    static readonly OR = 3;
    static readonly XOR = 4;
    static readonly NOT = 5;
    static readonly ASSIGN = 6;
    static readonly EQ = 7;
    static readonly NE = 8;
    static readonly LT = 9;
    static readonly LE = 10;
    static readonly GT = 11;
    static readonly GE = 12;
    static readonly MATCH = 13;
    static readonly WITH = 14;
    static readonly PLUS = 15;
    static readonly MINUS = 16;
    static readonly MULT = 17;
    static readonly DIV = 18;
    static readonly MAX_AGGR = 19;
    static readonly MIN_AGGR = 20;
    static readonly SUM = 21;
    static readonly COUNT = 22;
    static readonly AVG = 23;
    static readonly MEDIAN = 24;
    static readonly GROUP_BY = 25;
    static readonly ABS = 26;
    static readonly ISNULL = 27;
    static readonly EXISTS = 28;
    static readonly EXP = 29;
    static readonly LN = 30;
    static readonly SQRT = 31;
    static readonly POWER = 32;
    static readonly LOG = 33;
    static readonly MAX = 34;
    static readonly MIN = 35;
    static readonly IN = 36;
    static readonly COMMA = 37;
    static readonly DOUBLE_POINTS = 38;
    static readonly LPAREN = 39;
    static readonly RPAREN = 40;
    static readonly CURLY_BRACKET_LEFT = 41;
    static readonly CURLY_BRACKET_RIGHT = 42;
    static readonly SQUARE_BRACKET_LEFT = 43;
    static readonly SQUARE_BRACKET_RIGHT = 44;
    static readonly INTERVAL = 45;
    static readonly DEFAULT = 46;
    static readonly IF = 47;
    static readonly THEN = 48;
    static readonly ELSE = 49;
    static readonly NVL = 50;
    static readonly FILTER = 51;
    static readonly WHERE = 52;
    static readonly GET = 53;
    static readonly RENAME = 54;
    static readonly TO = 55;
    static readonly TIME_SHIFT = 56;
    static readonly LEN = 57;
    static readonly CONCAT = 58;
    static readonly ROW = 59;
    static readonly ROW_RANGE = 60;
    static readonly ROW_ALL = 61;
    static readonly ROW_HEADING = 62;
    static readonly COL = 63;
    static readonly COL_RANGE = 64;
    static readonly COL_ALL = 65;
    static readonly COL_HEADING = 66;
    static readonly SHEET = 67;
    static readonly SHEET_RANGE = 68;
    static readonly SHEET_ALL = 69;
    static readonly SHEET_HEADING = 70;
    static readonly TABLE = 71;
    static readonly VAR_REF = 72;
    static readonly PRECONDITION_ELEM = 73;
    static readonly TIME_PERIOD = 74;
    static readonly EOL = 75;
    static readonly WS = 76;
    static readonly INTEGER_LITERAL = 77;
    static readonly DECIMAL_LITERAL = 78;
    static readonly PERCENT_LITERAL = 79;
    static readonly STRING_LITERAL = 80;
    static readonly EMPTY_LITERAL = 81;
    static readonly LETTERS_NUMBERS = 82;
    static readonly channelNames: string[];
    static readonly modeNames: string[];
    static readonly ruleNames: string[];
    private static readonly _LITERAL_NAMES;
    private static readonly _SYMBOLIC_NAMES;
    static readonly VOCABULARY: Vocabulary;
    get vocabulary(): Vocabulary;
    constructor(input: CharStream);
    get grammarFileName(): string;
    get ruleNames(): string[];
    get serializedATN(): string;
    get channelNames(): string[];
    get modeNames(): string[];
    private static readonly _serializedATNSegments;
    private static readonly _serializedATNSegment0;
    private static readonly _serializedATNSegment1;
    static readonly _serializedATN: string;
    static __ATN: ATN;
    static get _ATN(): ATN;
}
